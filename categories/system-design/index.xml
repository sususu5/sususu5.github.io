<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>System Design on David Hua</title>
        <link>https://sususu5.github.io/categories/system-design/</link>
        <description>Recent content in System Design on David Hua</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>David Hua</copyright>
        <lastBuildDate>Tue, 03 Jun 2025 16:18:56 +1000</lastBuildDate><atom:link href="https://sususu5.github.io/categories/system-design/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How to Design a TikTok</title>
        <link>https://sususu5.github.io/p/how-to-design-a-tiktok/</link>
        <pubDate>Tue, 03 Jun 2025 16:18:56 +1000</pubDate>
        
        <guid>https://sususu5.github.io/p/how-to-design-a-tiktok/</guid>
        <description>&lt;h1 id=&#34;how-to-design-a-tiktok&#34;&gt;How to design a TikTok
&lt;/h1&gt;&lt;h2 id=&#34;functional-requirements&#34;&gt;Functional Requirements
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Video Upload&lt;/strong&gt;: Allow users to upload videos to the platform.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Video Playback&lt;/strong&gt;: Enable users to watch videos.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By developing these, we can construct a minimum viable product.&lt;/p&gt;
&lt;h2 id=&#34;non-functional-requirements&#34;&gt;Non-functional Requirements
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Support a massive user base with high concurrency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt;: Ensure the system remains operational even during partial failures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low Latency&lt;/strong&gt;: Minimize delays in video loading and playback.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fault Tolerance&lt;/strong&gt;: Handle hardware/network failures gracefully without data loss.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User Base&lt;/strong&gt;: 1 billion daily active users (DAU).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Usage Patterns&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Each user watches 100 videos per day.&lt;/li&gt;
&lt;li&gt;Each user uploads 1 video per day.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Video Size&lt;/strong&gt;: Average video size is 10MB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;database-selection-sql-vs-nosql&#34;&gt;Database Selection: SQL vs NoSQL
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SQL Databases&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Pros&lt;/em&gt;: Strong consistency, relational data support.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cons&lt;/em&gt;: Challenges with sharding and hotspot management.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NoSQL Databases&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Pros&lt;/em&gt;: Cost-effective, horizontally scalable.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cons&lt;/em&gt;: Limited transactional support.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;video-storage-strategy&#34;&gt;Video Storage Strategy
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Blob Storage (Binary Large Object)&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimized for unstructured data (videos, images, audio).&lt;/li&gt;
&lt;li&gt;Ideal for storing and retrieving large volumes of small files efficiently.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-upload-a-video&#34;&gt;How to upload a video
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Since we don&amp;rsquo;t know what users are uploading, exposing the storage to the interface directly is unsafe.&lt;/li&gt;
&lt;li&gt;A better option is allocating a temporary space to store the original videos uploaded by users.&lt;/li&gt;
&lt;li&gt;When uploading, a video can be cut into small pieces to support &lt;strong&gt;breakpoint resume upload&lt;/strong&gt; when a break happens, and also parallel uploading, which means multiple segments can be uploaded simultaneously. (for a mobile app, the network environment is not stable)&lt;/li&gt;
&lt;li&gt;Once all segments are uploaded, we can use a message queue and a worker pool to merge all the segments and do a file integrity verification. After that, this video should be encoded into different formats because videos of different qualities should be played according to devices and network.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how-to-watch-a-video&#34;&gt;How to watch a video
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;To avoid hotspots caused by frequent access to popular videos, we can deploy a CDN near user locations to offload traffic from the blob storage.&lt;/li&gt;
&lt;li&gt;Although storing videos in a CDN speeds up delivery and reduces latency, it also comes with high costs. So, we should make sure only the most popular videos are cached there.&lt;/li&gt;
&lt;li&gt;By introducing an extractor service, it can regularly find popular videos from the blob storage and send them to the CDN, those outdated videos are replaced.&lt;/li&gt;
&lt;li&gt;We can also introduce a streaming protocol like the HTTP Live Streaming from Apple to realize &amp;ldquo;stream-as-you-go&amp;rdquo; manner, which improves user experience.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;show-off&#34;&gt;Show off
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;We can introduce a recommendation system to recommend videos to users rather than pushing original feed accoring to the time.&lt;/li&gt;
&lt;li&gt;We can introduce a Two-Tower Model to embed user and video features into separate vectors. When a client requests videos, the system can recommend those that match their interests based on vector similarity.&lt;/li&gt;
&lt;li&gt;The pro is the vieo watching time of clients can be extended, the con is the extra cost of hiring a team to construct and deploy the model.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://sususu5.github.io/images/sys_tiktok.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;System Architecture&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>System Design Basic 2</title>
        <link>https://sususu5.github.io/p/system-design-basic-2/</link>
        <pubDate>Mon, 26 May 2025 20:51:24 +0800</pubDate>
        
        <guid>https://sususu5.github.io/p/system-design-basic-2/</guid>
        <description>&lt;h1 id=&#34;system-design-basic-2&#34;&gt;System Design Basic 2
&lt;/h1&gt;&lt;h2 id=&#34;sql-vs-nosql&#34;&gt;SQL vs NoSQL
&lt;/h2&gt;&lt;h3 id=&#34;sql-relational-databases&#34;&gt;SQL (Relational Databases)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key Examples&lt;/strong&gt;: MySQL, PostgreSQL, Oracle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core Philosophy&lt;/strong&gt;: Structured, Strong Consistency, and Transactions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When to choose&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fixed &amp;amp; Complex Data Schema&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;E-commerce Orders&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requires Strong Consistency (ACID Transactions)&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nosql-non-relational-databases&#34;&gt;NoSQL (Non-Relational Databases)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key Examples&lt;/strong&gt;: MongoDB (Document), Redis (Key-Value), Cassandra (Columnar)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core Philosophy&lt;/strong&gt;: High Scalability, Flexibility, and Performanceï¼Œusually accepts Eventual Consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When to choose&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexible or Evolving Data Schema&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Needs Extremely High Read/Write Throughput &amp;amp; Massive Data Storage&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requires High Availability (Fault Tolerance) &amp;amp; Distributed Nature&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eventual Consistency is Acceptable&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scale-up-vs-scale-out&#34;&gt;Scale Up vs Scale Out
&lt;/h2&gt;&lt;h3 id=&#34;scale-up-vertical-scaling&#34;&gt;Scale Up (Vertical Scaling)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Definition: Adding more power to an existing machine&lt;/li&gt;
&lt;li&gt;Situation: Startup or simple app, performance bottleneck on one machine (short term)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scale-out-horizontal-scaling&#34;&gt;Scale Out (Horizontal Scaling)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Definition: Adding more machines to the system&lt;/li&gt;
&lt;li&gt;Situation: High-traffic web application, cloud-native or containerized systems&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>System Design Basic 1</title>
        <link>https://sususu5.github.io/p/system-design-basic-1/</link>
        <pubDate>Fri, 23 May 2025 21:35:58 +0800</pubDate>
        
        <guid>https://sususu5.github.io/p/system-design-basic-1/</guid>
        <description>&lt;h1 id=&#34;system-design-basic-1&#34;&gt;System Design Basic 1
&lt;/h1&gt;&lt;h2 id=&#34;cap-theorem&#34;&gt;CAP Theorem
&lt;/h2&gt;&lt;p&gt;Any distributed system cannot simultaneously guarantee all three of the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All nodes see the same data at the same time&lt;/li&gt;
&lt;li&gt;All replicas in the system remain synchronized&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system remains operational even when some nodes fail&lt;/li&gt;
&lt;li&gt;Every request receives a response (whether success or failure)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Partition Tolerance&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system continues to operate despite network partitions (communication breakdowns between nodes)&lt;/li&gt;
&lt;li&gt;The system functions normally even when messages are lost or delayed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consistency-models&#34;&gt;Consistency Models
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strong Consistency Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linearizability&lt;/strong&gt;: The strongest consistency guarantee, where the system behaves as if there&amp;rsquo;s only one copy of data, with all operations having a global execution order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provides real-time guarantees&lt;/li&gt;
&lt;li&gt;Highest performance overhead&lt;/li&gt;
&lt;li&gt;Use Cases: Financial transaction systems, inventory management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sequential Consistency&lt;/strong&gt;: All processes see the same order of operations, but it doesn&amp;rsquo;t need to correspond to real-time ordering.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slightly weaker than linearizability but more efficient&lt;/li&gt;
&lt;li&gt;Guarantees consistent global operation ordering&lt;/li&gt;
&lt;li&gt;Allows some latency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Causal Consistency&lt;/strong&gt;: Only guarantees that causally related operations execute in the same order across all nodes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Weaker than sequential consistency but more practical&lt;/li&gt;
&lt;li&gt;Allows different ordering of concurrent operations&lt;/li&gt;
&lt;li&gt;Maintains logical dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weak Consistency Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eventual Consistency&lt;/strong&gt;: The system guarantees that all replicas will eventually converge to the same state when no new updates occur.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High availability and performance&lt;/li&gt;
&lt;li&gt;Allows temporary inconsistencies&lt;/li&gt;
&lt;li&gt;Requires conflict resolution mechanisms&lt;/li&gt;
&lt;li&gt;Use Cases: DNS systems, social media feeds, shopping carts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Session Consistency&lt;/strong&gt;: Guarantees consistency within a single session, ensuring users see monotonic data within their session.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read-your-writes: Users can see their own writes&lt;/li&gt;
&lt;li&gt;Monotonic reads: Won&amp;rsquo;t read older data&lt;/li&gt;
&lt;li&gt;Monotonic writes: Write operations execute in order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partition-tolerance&#34;&gt;Partition Tolerance
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementation Strategies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Replication&lt;/strong&gt;: Maintaining copies across multiple nodes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sharding&lt;/strong&gt;: Distributing data across different nodes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Correctness Protocols&lt;/strong&gt;: Using Paxos, Raft for consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure Detection&lt;/strong&gt;: Promptly identifying partition issues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Recovery Mechanisms&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anti-entropy&lt;/strong&gt;: Data synchronization after partition healing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read Repair&lt;/strong&gt;: Fixing inconsistencies during reads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Design Patterns&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leader Election&lt;/strong&gt;: Re-establishing primary nodes after partition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read/Write Quorums&lt;/strong&gt;: Setting R + W &amp;gt; N for consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
