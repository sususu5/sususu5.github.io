<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>System Design on David Hua</title>
        <link>https://sususu5.github.io/categories/system-design/</link>
        <description>Recent content in System Design on David Hua</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>David Hua</copyright>
        <lastBuildDate>Mon, 26 May 2025 20:51:24 +0800</lastBuildDate><atom:link href="https://sususu5.github.io/categories/system-design/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>System Design Basic 2</title>
        <link>https://sususu5.github.io/p/system-design-basic-2/</link>
        <pubDate>Mon, 26 May 2025 20:51:24 +0800</pubDate>
        
        <guid>https://sususu5.github.io/p/system-design-basic-2/</guid>
        <description>&lt;h1 id=&#34;system-design-basic-2&#34;&gt;System Design Basic 2
&lt;/h1&gt;&lt;h2 id=&#34;sql-vs-nosql&#34;&gt;SQL vs NoSQL
&lt;/h2&gt;&lt;h3 id=&#34;sql-relational-databases&#34;&gt;SQL (Relational Databases)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key Examples&lt;/strong&gt;: MySQL, PostgreSQL, Oracle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core Philosophy&lt;/strong&gt;: Structured, Strong Consistency, and Transactions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When to choose&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fixed &amp;amp; Complex Data Schema&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;E-commerce Orders&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requires Strong Consistency (ACID Transactions)&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nosql-non-relational-databases&#34;&gt;NoSQL (Non-Relational Databases)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key Examples&lt;/strong&gt;: MongoDB (Document), Redis (Key-Value), Cassandra (Columnar)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core Philosophy&lt;/strong&gt;: High Scalability, Flexibility, and Performanceï¼Œusually accepts Eventual Consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When to choose&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexible or Evolving Data Schema&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Needs Extremely High Read/Write Throughput &amp;amp; Massive Data Storage&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requires High Availability (Fault Tolerance) &amp;amp; Distributed Nature&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eventual Consistency is Acceptable&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>System Design Basic 1</title>
        <link>https://sususu5.github.io/p/system-design-basic-1/</link>
        <pubDate>Fri, 23 May 2025 21:35:58 +0800</pubDate>
        
        <guid>https://sususu5.github.io/p/system-design-basic-1/</guid>
        <description>&lt;h1 id=&#34;system-design-basic-1&#34;&gt;System Design Basic 1
&lt;/h1&gt;&lt;h2 id=&#34;cap-theorem&#34;&gt;CAP Theorem
&lt;/h2&gt;&lt;p&gt;Any distributed system cannot simultaneously guarantee all three of the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All nodes see the same data at the same time&lt;/li&gt;
&lt;li&gt;All replicas in the system remain synchronized&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system remains operational even when some nodes fail&lt;/li&gt;
&lt;li&gt;Every request receives a response (whether success or failure)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Partition Tolerance&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system continues to operate despite network partitions (communication breakdowns between nodes)&lt;/li&gt;
&lt;li&gt;The system functions normally even when messages are lost or delayed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consistency-models&#34;&gt;Consistency Models
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strong Consistency Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linearizability&lt;/strong&gt;: The strongest consistency guarantee, where the system behaves as if there&amp;rsquo;s only one copy of data, with all operations having a global execution order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provides real-time guarantees&lt;/li&gt;
&lt;li&gt;Highest performance overhead&lt;/li&gt;
&lt;li&gt;Use Cases: Financial transaction systems, inventory management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sequential Consistency&lt;/strong&gt;: All processes see the same order of operations, but it doesn&amp;rsquo;t need to correspond to real-time ordering.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slightly weaker than linearizability but more efficient&lt;/li&gt;
&lt;li&gt;Guarantees consistent global operation ordering&lt;/li&gt;
&lt;li&gt;Allows some latency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Causal Consistency&lt;/strong&gt;: Only guarantees that causally related operations execute in the same order across all nodes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Weaker than sequential consistency but more practical&lt;/li&gt;
&lt;li&gt;Allows different ordering of concurrent operations&lt;/li&gt;
&lt;li&gt;Maintains logical dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weak Consistency Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eventual Consistency&lt;/strong&gt;: The system guarantees that all replicas will eventually converge to the same state when no new updates occur.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High availability and performance&lt;/li&gt;
&lt;li&gt;Allows temporary inconsistencies&lt;/li&gt;
&lt;li&gt;Requires conflict resolution mechanisms&lt;/li&gt;
&lt;li&gt;Use Cases: DNS systems, social media feeds, shopping carts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Session Consistency&lt;/strong&gt;: Guarantees consistency within a single session, ensuring users see monotonic data within their session.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read-your-writes: Users can see their own writes&lt;/li&gt;
&lt;li&gt;Monotonic reads: Won&amp;rsquo;t read older data&lt;/li&gt;
&lt;li&gt;Monotonic writes: Write operations execute in order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partition-tolerance&#34;&gt;Partition Tolerance
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementation Strategies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Replication&lt;/strong&gt;: Maintaining copies across multiple nodes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sharding&lt;/strong&gt;: Distributing data across different nodes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Correctness Protocols&lt;/strong&gt;: Using Paxos, Raft for consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure Detection&lt;/strong&gt;: Promptly identifying partition issues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Recovery Mechanisms&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anti-entropy&lt;/strong&gt;: Data synchronization after partition healing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read Repair&lt;/strong&gt;: Fixing inconsistencies during reads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Design Patterns&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leader Election&lt;/strong&gt;: Re-establishing primary nodes after partition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read/Write Quorums&lt;/strong&gt;: Setting R + W &amp;gt; N for consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
