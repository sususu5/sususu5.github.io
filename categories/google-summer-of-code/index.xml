<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Google Summer of Code on David Hua</title>
        <link>https://sususu5.github.io/categories/google-summer-of-code/</link>
        <description>Recent content in Google Summer of Code on David Hua</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>David Hua</copyright>
        <lastBuildDate>Mon, 30 Jun 2025 21:27:19 +1000</lastBuildDate><atom:link href="https://sususu5.github.io/categories/google-summer-of-code/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GSoC Week 4</title>
        <link>https://sususu5.github.io/p/gsoc-week-4/</link>
        <pubDate>Mon, 30 Jun 2025 21:27:19 +1000</pubDate>
        
        <guid>https://sususu5.github.io/p/gsoc-week-4/</guid>
        <description>&lt;h1 id=&#34;-google-summer-of-code---week-4&#34;&gt;üöÄ Google Summer of Code - Week 4
&lt;/h1&gt;&lt;h2 id=&#34;-completed-work&#34;&gt;‚úÖ Completed Work
&lt;/h2&gt;&lt;h3 id=&#34;-partitioner_with_cleanup&#34;&gt;üîß &lt;code&gt;partitioner_with_cleanup&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‚ú® Added adaptation to S/R (Sender/Receiver)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-uninitialized_copy&#34;&gt;üìã &lt;code&gt;uninitialized_copy&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‚ú® Added adaptation to S/R (Sender/Receiver)&lt;/li&gt;
&lt;li&gt;üß™ Added basic test cases&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-key-learnings&#34;&gt;üìö Key Learnings
&lt;/h2&gt;&lt;h3 id=&#34;-cv-qualifier&#34;&gt;üè∑Ô∏è CV-qualifier
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;const&lt;/code&gt;&lt;/strong&gt;: Read-only qualifier, the object cannot be modified&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;volatile&lt;/code&gt;&lt;/strong&gt;: Prevents compiler optimizations, the object might change unexpectedly&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-parameter-pack&#34;&gt;üì¶ Parameter pack
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allows accepting any number of arguments in template functions&lt;/li&gt;
&lt;li&gt;Provides flexibility in function parameter handling&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-mutable&#34;&gt;üîÑ &lt;code&gt;mutable&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allows modifying captured variables in lambda expressions&lt;/li&gt;
&lt;li&gt;Most commonly used in lambda expressions to qualify &lt;code&gt;operator()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-stdapply&#34;&gt;‚ö° &lt;code&gt;std::apply&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allows you to call a callable object (like a function, lambda, or function object) with the elements of a &lt;code&gt;std::tuple&lt;/code&gt; (or a &lt;code&gt;std::pair&lt;/code&gt;) unpacked as individual arguments&lt;/li&gt;
&lt;li&gt;Provides a clean way to expand tuple elements as function parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-sr-functions&#34;&gt;üì° S/R Functions
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;let_value&lt;/code&gt;&lt;/strong&gt;: Takes a sender and a function. Once the sender completes with some values, the function is called with them and returns another sender&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;let_error&lt;/code&gt;&lt;/strong&gt;: If input completes successfully, its values are forwarded to the downstream receiver. If input completes with an error, the function is invoked and returns a receiver&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;just_error&lt;/code&gt;&lt;/strong&gt;: A sender factory that returns a sender which, upon connection and start, immediately invokes the receiver&amp;rsquo;s &lt;code&gt;set_error()&lt;/code&gt; with the provided error&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-next-week-goals&#34;&gt;üéØ Next Week Goals
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; üß™ Add more comprehensive test cases for &lt;code&gt;uninitialized_copy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; üîß Add adaptation to more algorithms depending on &lt;code&gt;partitioner_with_cleanup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Week 4 has been productive with significant progress on S/R adaptations and foundational learning about C++ concepts! üí™&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GSoC Week 3</title>
        <link>https://sususu5.github.io/p/gsoc-week-3/</link>
        <pubDate>Thu, 26 Jun 2025 23:10:59 +1000</pubDate>
        
        <guid>https://sususu5.github.io/p/gsoc-week-3/</guid>
        <description>&lt;h1 id=&#34;google-summer-of-code---week-3&#34;&gt;Google Summer of Code - Week 3
&lt;/h1&gt;&lt;h2 id=&#34;completed-work&#34;&gt;Completed Work
&lt;/h2&gt;&lt;h3 id=&#34;partial_sort&#34;&gt;&lt;code&gt;partial_sort&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The algorithm has been modified to accomodate the S/R model.&lt;/li&gt;
&lt;li&gt;Tests passed on my local end but failed on Github CI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;key-learnings&#34;&gt;Key Learnings
&lt;/h2&gt;&lt;h3 id=&#34;the-structure-of-hpx-partitioner&#34;&gt;The structure of hpx partitioner
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;partition&lt;/code&gt;: basic partitioning function with three strategies: variable block size, static block size, and adaptive strategy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition_with_index&lt;/code&gt;: supporting strided partitioning, applicable to algorithms requiring index information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition_with_data&lt;/code&gt;: associating pre-defined data with specific block sizes, supporting more fine-grained load control&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_partitioner&lt;/code&gt;: for synchronous execution strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;task_static_partitioner&lt;/code&gt;: for asynchronous execution strategies: all operations returns a future object, supports un-blocked combination of task chain, more applicble to complex asynchronous workflow&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-does-partitioner-accomodate-the-sr-model&#34;&gt;How does partitioner accomodate the S/R model
&lt;/h3&gt;&lt;p&gt;ExPolicy ‚Üí Executor types ‚Üí bulk_async_execute return types ‚Üí reduce branch choosing&lt;/p&gt;
&lt;h2 id=&#34;next-week-goals&#34;&gt;Next Week Goals
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Improving &lt;code&gt;partitioner_with_cleanup&lt;/code&gt; to accomodate the S/R execution model&lt;/li&gt;
&lt;li&gt;Writing tests for algorithms depending on &lt;code&gt;partitioner_with_cleanup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Improving related algorithms to accomodate the S/R model&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GSoC Week 2</title>
        <link>https://sususu5.github.io/p/gsoc-week-2/</link>
        <pubDate>Thu, 19 Jun 2025 22:03:52 +1000</pubDate>
        
        <guid>https://sususu5.github.io/p/gsoc-week-2/</guid>
        <description>&lt;h1 id=&#34;google-summer-of-code---week-2&#34;&gt;Google Summer of Code - Week 2
&lt;/h1&gt;&lt;h2 id=&#34;completed-work&#34;&gt;Completed Work
&lt;/h2&gt;&lt;h3 id=&#34;nth_element&#34;&gt;&lt;code&gt;nth_element&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fixed all issues with the parallel version of &lt;code&gt;nth_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All unit tests now pass&lt;/li&gt;
&lt;li&gt;Full CI pipeline passes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;partial_sort&#34;&gt;&lt;code&gt;partial_sort&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Analyzed the algorithm structure of &lt;code&gt;partial_sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Identified key components for parallel implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;key-learnings&#34;&gt;Key Learnings
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Technical Insight&lt;/strong&gt;: When using &lt;code&gt;just&lt;/code&gt; and &lt;code&gt;then&lt;/code&gt; functions in HPX:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Include: &lt;code&gt;#include &amp;lt;hpx/execution_base/stdexec_forward.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use namespace: &lt;code&gt;namespace ex = hpx::execution::experimental&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;next-week-goals&#34;&gt;Next Week Goals
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Complete the implementation fix for &lt;code&gt;partial_sort&lt;/code&gt; and more algorithms&lt;/li&gt;
&lt;li&gt;Ensure comprehensive testing and CI compliance&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GSoC Week 1</title>
        <link>https://sususu5.github.io/p/gsoc-week-1/</link>
        <pubDate>Thu, 05 Jun 2025 13:30:27 +1000</pubDate>
        
        <guid>https://sususu5.github.io/p/gsoc-week-1/</guid>
        <description>&lt;h1 id=&#34;google-summer-of-code-week-1&#34;&gt;Google Summer of Code Week 1
&lt;/h1&gt;&lt;h2 id=&#34;completed-work&#34;&gt;Completed work
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The modifications proposed in the proposal have been applied to the parallel version of &lt;code&gt;nth_element&lt;/code&gt;, but the unit test still didn&amp;rsquo;t pass.&lt;/li&gt;
&lt;li&gt;According to the error messages, the reason behind the failure is that the type returned by the &lt;code&gt;partition&lt;/code&gt; function is a &lt;code&gt;sender&lt;/code&gt;, which is not a &lt;code&gt;future&lt;/code&gt; expected by the &lt;code&gt;partition_iter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A specific implementation is planned to be added for the parallel version of the &lt;code&gt;nth_element&lt;/code&gt; to accommodate the Senders/Receivers mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;learnings&#34;&gt;Learnings
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Got a deeper understanding of the algorithms structure by reading the codebase. (&lt;code&gt;tag_parallel_algorithm&lt;/code&gt; wrapper -&amp;gt; &lt;code&gt;algorithm&lt;/code&gt; wrapper -&amp;gt; &lt;code&gt;sequential&lt;/code&gt; / &lt;code&gt;parallel&lt;/code&gt; implementation)&lt;/li&gt;
&lt;li&gt;Definitions of some basic modes of parallel algorithms. (reduce, scan, copy, map)&lt;/li&gt;
&lt;li&gt;The parallel version of the &lt;code&gt;nth_element&lt;/code&gt; algorithm uses partition rather than using a partitioner, which means certain proposed amendments from last year&amp;rsquo;s report might not be relevant anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;plan-for-next-week&#34;&gt;Plan for Next Week
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Complete the fix of the &lt;code&gt;nth_element&lt;/code&gt;, and the pull request should be merged.&lt;/li&gt;
&lt;li&gt;Start the fix for the next algorithm, the proposed one is &lt;code&gt;partial_sort&lt;/code&gt;, which may be further discussed.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
